name: Cypress CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ '*' ]
  workflow_dispatch:

env:
  NODE_ENV: test
  CYPRESS_BASE_URL: http://127.0.0.1:8000
  DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/xprezideas_crm
  NPM_CACHE_DIR: ~/.npm

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  cypress-e2e:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: xprezideas_crm
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d xprezideas_crm"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      PIP_CACHE_DIR: ~/.cache/pip

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Restore npm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.NPM_CACHE_DIR }}
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      - name: Restore pip cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt', 'pyproject.toml') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install system packages
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y build-essential libpq-dev postgresql-client netcat-openbsd curl
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install Python dependencies
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ] ; then python -m pip install -r requirements.txt ; fi
          if [ -f pyproject.toml ] ; then python -m pip install -e . ; fi

      - name: Install Node dependencies
        run: npm ci

      - name: Wait for database
        run: |
          set -euxo pipefail
          for i in {1..60}; do
            if pg_isready -h localhost -p 5432 -U postgres -d xprezideas_crm; then
              echo "Postgres is ready"
              exit 0
            fi
            sleep 2
          done
          echo "Database did not become ready in time" >&2
          exit 1

      - name: Start API (background)
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          set -euxo pipefail
          # app lives in app/main.py and exposes "app"
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          echo $! > api.pid

      - name: Wait for API port
        run: |
          set -euxo pipefail
          # wait up to ~120s for TCP port 8000 to open
          for i in {1..120}; do
            if nc -z 127.0.0.1 8000; then
              echo "Port 8000 is open"
              exit 0
            fi
            sleep 1
          done
          echo "Port 8000 did not open in time" >&2
          exit 1

      - name: Health check (FastAPI docs)
        run: |
          set -euxo pipefail
          # /docs returns 200 if FastAPI app is live (assuming docs not disabled)
          curl --silent --fail "$CYPRESS_BASE_URL/docs" >/dev/null

      - name: Run Cypress tests
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        run: |
          set -euxo pipefail
          EXTRA_ARGS=""
          if [ -n "${CYPRESS_RECORD_KEY:-}" ]; then
            EXTRA_ARGS="--record --key $CYPRESS_RECORD_KEY"
          fi
          npx cypress run $EXTRA_ARGS

      - name: Upload screenshots (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          if-no-files-found: ignore

      - name: Upload videos (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos
          path: cypress/videos
          if-no-files-found: ignore

      - name: Stop API process
        if: always()
        run: |
          if [ -f api.pid ]; then
            kill "$(cat api.pid)" || true
          fi
