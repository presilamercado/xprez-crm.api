meta {
  name: Customer Lifecycle Test
  type: http
  seq: 5
}

get {
  url: {{BASE_URL}}/api/v1/customers/{{finalCustomerID}}
  body: none
  auth: none
}

script:pre-request {
  const timestamp = Date.now();
  
  async function runCustomerLifecycleTest() {
    console.log('üöÄ Starting Customer Lifecycle Test...');
    
    // 1. CREATE CUSTOMER
    let initialData = {
      "email": `lifecycle.${timestamp}@example.com`,
      "phone": "0279603144",
      "companyName": "Lifecycle Test Company",
      "notes": "Created for lifecycle testing",
      "isActive": true
    };
    
    console.log('üìù Step 1: Creating customer...');
    const createResponse = await postCustomer(initialData);
    
    if (!createResponse?.data?.id) {
      throw new Error('Failed to create customer');
    }
    
    const customerId = createResponse.data.id;
    console.log('‚úÖ Customer created with ID:', customerId);
    
    // 2. UPDATE CUSTOMER
    let updateData = {
      "email": `updated.lifecycle.${timestamp}@example.com`,
      "phone": "0279603999",
      "companyName": "Updated Lifecycle Company",
      "notes": "Updated during lifecycle testing",
      "isActive": false
    };
    
    console.log('üìù Step 2: Updating customer...');
    const updateResponse = await updateCustomer(customerId, updateData);
    
    if (updateResponse?.status !== 200) {
      throw new Error('Failed to update customer');
    }
    
    console.log('‚úÖ Customer updated successfully');
    
    // 3. GET CUSTOMER (this will be the actual HTTP request)
    console.log('üìù Step 3: Getting updated customer (via HTTP request)...');
    bru.setVar('finalCustomerID', customerId);
    
    // Store expected data for post-response verification
    bru.setVar('expectedEmail', updateData.email);
    bru.setVar('expectedCompanyName', updateData.companyName);
    bru.setVar('expectedIsActive', updateData.isActive);
    
    // Note: We'll verify the GET in post-response, then delete in a separate test
    
    console.log('üéØ Pre-request completed. The GET request will now execute...');
  }
  
  try {
    await runCustomerLifecycleTest();
  } catch (error) {
    console.error('‚ùå Lifecycle test failed:', error.message);
    throw error;
  }
}

script:post-response {
  const { status, data } = res;
  const customerId = bru.getVar('finalCustomerID');
  
  async function verifyAndCleanup() {
    if (status === 200 && data) {
      console.log('‚úÖ Step 3 completed: Customer retrieved successfully');
      
      // Verify the data matches our expectations
      const expectedEmail = bru.getVar('expectedEmail');
      const expectedCompanyName = bru.getVar('expectedCompanyName');
      const expectedIsActive = bru.getVar('expectedIsActive');
      
      if (data.email === expectedEmail && 
          data.companyName === expectedCompanyName && 
          data.isActive === expectedIsActive) {
        console.log('‚úÖ Data verification passed');
      } else {
        console.log('‚ùå Data verification failed');
        console.log('Expected:', { expectedEmail, expectedCompanyName, expectedIsActive });
        console.log('Received:', { email: data.email, companyName: data.companyName, isActive: data.isActive });
      }
      
      // 4. DELETE CUSTOMER (cleanup)
      console.log('üìù Step 4: Cleaning up - deleting customer...');
      const deleteResponse = await deleteCustomer(customerId);
      
      if (deleteResponse?.status === 204) {
        console.log('‚úÖ Customer deleted successfully');
        console.log('üéâ Complete lifecycle test passed!');
      } else {
        console.log('‚ö†Ô∏è Failed to delete customer - manual cleanup may be needed');
      }
      
    } else {
      console.error('‚ùå Failed to retrieve customer:', status);
    }
  }
  
  try {
    await verifyAndCleanup();
  } catch (error) {
    console.error('‚ùå Post-response error:', error.message);
  }
}

settings {
  encodeUrl: true
}