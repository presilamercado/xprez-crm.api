meta {
  name: List of Customer
  type: http
  seq: 1
}

get {
  url: {{BASE_URL}}/api/v1/customers
  body: none
  auth: inherit
}

assert {
  res.status: eq 200
}

script:post-response {
  test('returns customers with required fields', () => {
    const data = res.getBody();

    expect(Array.isArray(data), 'response is array').to.eq(true);
    if (data.length === 0) {
      return;
    }

    data.slice(0, Math.min(10, data.length)).forEach((customer, index) => {
      expect(customer.email, `customer[${index}].email`).to.be.a('string');
      expect(customer.phone, `customer[${index}].phone`).to.be.a('string');
      expect(customer).to.have.property('company_name');
      expect(customer).to.have.property('notes');
      expect(customer.is_active, `customer[${index}].is_active`).to.be.a('boolean');
      expect(customer.id, `customer[${index}].id`).to.be.a('string');
    });
  });
}

tests {
  test('returns customers with required fields', () => {
    const data = res.getBody();

    expect(Array.isArray(data), 'response is array').to.eq(true);
    if (data.length === 0) {
      return;
    }

    data.slice(0, Math.min(10, data.length)).forEach((customer, index) => {
      expect(customer.email, `customer[${index}].email`).to.be.a('string');
      expect(customer.phone, `customer[${index}].phone`).to.be.a('string');
      expect(customer).to.have.property('company_name');
      expect(customer).to.have.property('notes');
      expect(customer.is_active, `customer[${index}].is_active`).to.be.a('boolean');
      expect(customer.id, `customer[${index}].id`).to.be.a('string');
    });
  });
}
